////////////////////////////////////////////////////////////////////////////////
// ffpieee.h
////////////////////////////////////////////////////////////////////////////////

#pragma once

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
typedef unsigned int u32;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
constexpr float ffp_from_ieee(float f)
{
	union { float f; u32 u; } v = {f};

	if (v.u != 0)
	{
		if (v.u == 0x80000000)
		{
			// Negative zero.
			v.u = 0;
		}
		else if ((v.u & 0x7fe00000) == 0)
		{
			// Denormal.
			v.u = 0;
		}
		else if ((v.u & 0x7fe00000) == 0x7fe00000)
		{
			if ((v.u & 0x007fffff) != 0)
			{
				// Not a number.
				v.u = 0;
			}
			else
			{
				// Infinity.
				v.u = 0xffffff7f | ((v.u >> 24) & 0x80);
			}
		}
		else
		{
			int exponent = ((v.u >> 23) & 0xff) - 127;

			if (exponent < -64)
			{
				// Exponent too small.
				v.u = 0;
			}
			else if (exponent > 63)
			{
				// Exponent too large.
				v.u = 0xffffff7f | ((v.u >> 24) & 0x80);
			}
			else
			{
				v.u = 0x80000000 | (v.u << 8) | ((v.u >> 24) & 0x80) | (exponent + 65);
			}
		}
	}

	return v.f;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
constexpr float ieee_from_ffp(float f)
{
	union { float f; u32 u; } v = {f};

	if (v.u != 0)
	{
		v.u = ((v.u & 0x80) << 24) | (((v.u & 0x7f) + 62) << 23) | ((v.u >> 8) & 0x7fffff);
	}

	return v.f;
}
